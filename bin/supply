#!/usr/bin/env bash
#
# bin/supply <build-dir> <cache-dir> <deps-dir> <index>
#
# The supply script provides dependencies for the app and runs for all buildpacks.
# All output sent to STDOUT is relayed to the user through the cf CLI.
#
# The script is run with four arguments:
#
# - The build directory for the app
# - The cache directory, which is a location the buildpack can use to store assets during the build process
# - The deps directory, which is where dependencies provided by all buildpacks are installed
# - The index, which is a number that represents the ordinal position of the buildpack
#
# The supply script stores dependencies in `deps/index`. It may also look in other directories
# within deps to find dependencies supplied by other buildpacks.
# 
# The supply script must not modify anything outside of the deps/index directory. Staging may
# fail if such modification is detected.
# 
# The cache directory provided to the supply script of the final buildpack is preserved even
# when the buildpack is upgraded or otherwise changes. The finalize script also has access
# to this cache directory.
# 
# The cache directories provided to the supply scripts of non-final buildpacks are cleared
# if those buildpacks are upgraded or otherwise change.
#shellcheck disable=SC2006,SC2016,SC2155

echo "bin/supply running"

BUILDPACK_NAME=openresty-decorator
BIN_DIR=$(cd $(dirname $0); pwd)
#ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
#CACHE_DIR=$2
DEPS_DIR=$3
INDEX=$4

set -ex

my_deps=$(realpath "$DEPS_DIR/$INDEX")

deps_file="$BUILD_DIR"/opm.deps
[ -f "$deps_file" ] || echo 'WARNING: no `opm.deps` file was present in your app. Did you forget something?' >&2

echo "DEPS_DIR: $DEPS_DIR"
ls -al "$DEPS_DIR"

echo "my_deps: ${my_deps}"
ls -al "$my_deps"

# Find where the Nginx buildpack was installed in DEPS_DIR
nginx_deps_dir=$(find "$DEPS_DIR" -type d -name nginx -print -quit)/..
if [[ "$nginx_deps_dir" == "/.." ]]; then
  echo "Could not find nginx. Ensure that your app was pushed with the nginx buildpack and that it \
    precedes openresty-decorator-buildpack in the `buildpacks` list." >&2
  exit 1
else
  nginx_deps_dir=$(realpath "$nginx_deps_dir") # make into an absolute path
fi

# Copy the entire folder from nginx's deps directory to ours, we're basically stealing it all
cp -rT "$nginx_deps_dir" "$my_deps"

ls -al "$my_deps"

# hack paths within profile.d to point to our dep dir, not nginx's
sed -i "s#\$DEPS_DIR/[0-9]#\$DEPS_DIR/${INDEX}#g" "${my_deps}/profile.d"/*

# overwrite config.yml with our own buildpack name so we're not claiming to be "nginx"
sed -i s/nginx/${BUILDPACK_NAME}/ "${my_deps}/config.yml"

# Problem: as a side effect of the Nginx buildpack having done its work, the nginx_path in openresty's
# config file is set to some temp folder that no longer exists:
#   my $nginx_path = '/tmp/d20190829-7-6tk6jx/openresty/nginx/sbin/nginx';
# opm wants to keep installing into this folder. Appease it by creating the folder as a symlink to
# $my_deps/nginx -- it will work and install into our deps folder.
nginx_path=$(grep "my \$nginx_path =" "$my_deps"/nginx/bin/resty | awk '{print $4}' | tr -d \'\;)
opm_temp_dir=${nginx_path%/openresty/nginx/sbin/nginx} # remove suffix
mkdir -p "$opm_temp_dir"
( cd "$opm_temp_dir" && ln -s "$my_deps"/nginx openresty )

echo "opm temp dir"
ls -al "$opm_temp_dir"

echo "nginx"
ls -al $opm_temp_dir/openresty/nginx/sbin/nginx

# Same problem but with the luajit.pc file
# TODO i'm not sure we actually need this"???????
sed -i 's#^prefix=.*$#prefix='"$my_deps"/nginx/luajit'#' "$my_deps"/nginx/luajit/lib/pkgconfig/luajit.pc

# Set the lua_package_path and lua_package_cpath in the application's nginx conf file, http section.
# This is ridiculous. There has to be a better way
nginx_conf=$(find "$BUILD_DIR" -name nginx.conf -print -quit)
if [[ $nginx_conf == "" ]]; then
  echo 'WARNING: could not add lua_package_path to your nginx.conf. Make sure you add it yourself.' >&2
else
  echo " -> Adding lua_package_path to nginx.conf"
  awk '/http \{/{print;print "  lua_package_path \"/home/vcap/deps/'"${INDEX}"'/nginx/lualib/?.lua;;\";";next}1' "$nginx_conf" > /tmp/conf.0

  echo " -> Adding lua_package_cpath to nginx.conf"
  awk '/http \{/{print;print "  lua_package_cpath \"/home/vcap/deps/'"${INDEX}"'/nginx/lualib/?.so;;\";";next}1' /tmp/conf.0 > /tmp/conf.1

  mv "$nginx_conf" "$nginx_conf".0
  mv /tmp/conf.1 "$nginx_conf"
fi

# Install the modules into nginx's deps folder.
# First we must add nginx binaries to PATH and LD_LIBRARY_PATH
path_suffix=$([[ -n "${PATH:-}" ]] && echo ":$PATH")
ld_suffix=$([[ -n "${LD_LIBRARY_PATH:-}" ]] && echo ":$LD_LIBRARY_PATH" || echo "")
export PATH=${my_deps}/bin:${my_deps}/nginx/bin:${my_deps}/nginx/luajit/bin${path_suffix}
export LD_LIBRARY_PATH=${my_deps}/nginx/luajit/lib${ld_suffix}

echo "  -> Installing opm depencendies..."
while IFS= read -r line ; do
  [[ $line =~ ^[[:space:]]*$ ]] && continue

  opm --install-dir="$my_deps"/nginx get "$line"
done < "$deps_file"

# Generate a ca-certs.pem file containing the trusted root CAs. This is not strictly necessary
# to use openresty, but in practice it is helpful since Lua doesn't seem to obey the system's
# trusted CAs on its own
cat /etc/ssl/certs/* > "$my_deps"/ca-certs.pem

find "${DEPS_DIR}/${INDEX}/" -maxdepth 2

echo "ok done"