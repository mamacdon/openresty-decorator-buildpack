#!/usr/bin/env bash
#
# bin/supply <build-dir> <cache-dir> <deps-dir> <index>
#
# The supply script provides dependencies for the app and runs for all buildpacks.
# All output sent to STDOUT is relayed to the user through the cf CLI.
#
# The script is run with four arguments:
#
# - The build directory for the app
# - The cache directory, which is a location the buildpack can use to store assets during the build process
# - The deps directory, which is where dependencies provided by all buildpacks are installed
# - The index, which is a number that represents the ordinal position of the buildpack
#
# The supply script stores dependencies in `deps/index`. It may also look in other directories
# within deps to find dependencies supplied by other buildpacks.
# 
# The supply script must not modify anything outside of the deps/index directory. Staging may
# fail if such modification is detected.
# 
# The cache directory provided to the supply script of the final buildpack is preserved even
# when the buildpack is upgraded or otherwise changes. The finalize script also has access
# to this cache directory.
# 
# The cache directories provided to the supply scripts of non-final buildpacks are cleared
# if those buildpacks are upgraded or otherwise change.
#shellcheck disable=SC2006,SC2016,SC2155

echo "bin/supply running"

BUILDPACK_NAME=openresty-decorator
BIN_DIR=$(cd $(dirname $0); pwd)
#ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
#CACHE_DIR=$2
DEPS_DIR=$3
INDEX=$4

set -xuo

my_deps=$(realpath "$DEPS_DIR/$INDEX")

deps_file="$BUILD_DIR"/opm.deps
[ -f "$deps_file" ] || echo 'WARNING: no `opm.deps` file was present in your app. Did you forget something?' >&2

echo "DEPS_DIR: $DEPS_DIR"
ls -al "$DEPS_DIR"

echo "my_deps: ${my_deps}"
ls -al "$my_deps"

# Find where the Nginx buildpack was installed in DEPS_DIR
nginx_deps_dir=$(find "$DEPS_DIR" -type d -name nginx -print -quit)/..
if [[ "$nginx_deps_dir" == "/.." ]]; then
  echo "Could not find nginx. Ensure that your app was pushed with the nginx buildpack and that it \
    precedes openresty-decorator-buildpack in the `buildpacks` list." >&2
  exit 1
else
  nginx_deps_dir=$(realpath "$nginx_deps_dir") # make into an absolute path
fi

# Copy the entire folder from nginx's deps directory to ours, we're basically stealing it all
cp -rT "$nginx_deps_dir" "$my_deps"

ls -al "$my_deps"

# hack paths within profile.d to point to our dep dir, not nginx's
sed -i "s#\$DEPS_DIR/[0-9]#\$DEPS_DIR/${INDEX}#g" "${my_deps}/profile.d"/*

# overwrite config.yml with our own buildpack name so we're not claiming to be "nginx"
sed -i s/nginx/${BUILDPACK_NAME}/ "${my_deps}/config.yml"

# Problem: as a side effect of the Nginx buildpack having done its work, the nginx_path in openresty's
# config file is set to some temp folder that no longer exists:
#   my $nginx_path = '/tmp/d20190829-7-6tk6jx/openresty/nginx/sbin/nginx';
# opm wants to keep installing into this folder. Change the path to be inside ${my_deps} so it will work
sed -i 's#^my $nginx_path =.*$#my $nginx_path = '"'${my_deps}/nginx/nginx/sbin/nginx'"';#' "$my_deps"/nginx/bin/resty

# Same problem but with the luajit.pc file
sed -i 's#^prefix=.*$#prefix='"$my_deps"/nginx/luajit'#' "$my_deps"/nginx/luajit/lib/pkgconfig/luajit.pc
# /deps/1/nginx/luajit/lib/pkgconfig/luajit.pc:8:prefix=/tmp/d20190829-7-6tk6jx/openresty/luajit

# Install the modules into nginx's deps folder.
# First we must add nginx binaries to PATH
path_suffix=$([[ -n "${PATH:-}" ]] && echo ":$PATH")
export PATH=${my_deps}/bin:${my_deps}/nginx/bin:${my_deps}/nginx/luajit/bin${path_suffix}

while IFS= read -r line ; do
  [[ $line =~ ^[[:space:]]*$ ]] && continue

  opm install "$line"
done < "$deps_file"

find "${DEPS_DIR}/${INDEX}/" -maxdepth 2

echo "ok done"